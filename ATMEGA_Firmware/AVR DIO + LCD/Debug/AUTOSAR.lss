
AUTOSAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000444  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000444  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001362  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093b  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065f  00000000  00000000  000022dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  0000293c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000735  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000915  00000000  00000000  000031b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003ace  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  7a:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_WriteChannel>:


void Dio_WriteChannel(Dio_ChannelType channel, STD_levelType level)
{
	Dio_PortType port = channel/8;
	Dio_ChannelType channelPosition = channel%8;
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
	
	switch(port)
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <Dio_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <Dio_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <Dio_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <Dio_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <Dio_WriteChannel+0xca>
  9c:	08 95       	ret
	{
		case Dio_Port_A :
			if(level == STD_low)
  9e:	61 11       	cpse	r22, r1
  a0:	0e c0       	rjmp	.+28     	; 0xbe <Dio_WriteChannel+0x3c>
			{
				CLR_BIT(PORTA,channelPosition);
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Dio_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <Dio_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
			}else
			{
				SET_BIT(PORTA,channelPosition);
  be:	4b b3       	in	r20, 0x1b	; 27
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	b9 01       	movw	r22, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Dio_WriteChannel+0x4a>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Dio_WriteChannel+0x46>
  d0:	cb 01       	movw	r24, r22
  d2:	84 2b       	or	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
			}
			break;
			
		case Dio_Port_B :
			if(level == STD_low)
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <Dio_WriteChannel+0x76>
			{
				CLR_BIT(PORTB,channelPosition);
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret
			}else
			{
				SET_BIT(PORTB,channelPosition);
  f8:	48 b3       	in	r20, 0x18	; 24
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <Dio_WriteChannel+0x84>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	9a 95       	dec	r25
 108:	e2 f7       	brpl	.-8      	; 0x102 <Dio_WriteChannel+0x80>
 10a:	cb 01       	movw	r24, r22
 10c:	84 2b       	or	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
			}
			break;
			
		case Dio_Port_C :
			if(level == STD_low)
 112:	61 11       	cpse	r22, r1
 114:	0e c0       	rjmp	.+28     	; 0x132 <Dio_WriteChannel+0xb0>
			{
				CLR_BIT(PORTC,channelPosition);
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Dio_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <Dio_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
			}else
			{
				SET_BIT(PORTC,channelPosition);
 132:	45 b3       	in	r20, 0x15	; 21
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	b9 01       	movw	r22, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_WriteChannel+0xbe>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	9a 95       	dec	r25
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_WriteChannel+0xba>
 144:	cb 01       	movw	r24, r22
 146:	84 2b       	or	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
			}
			break;
			
		case Dio_Port_D :
			if(level == STD_low)
 14c:	61 11       	cpse	r22, r1
 14e:	0e c0       	rjmp	.+28     	; 0x16c <Dio_WriteChannel+0xea>
			{
				CLR_BIT(PORTD,channelPosition);
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	80 95       	com	r24
 166:	84 23       	and	r24, r20
 168:	82 bb       	out	0x12, r24	; 18
 16a:	08 95       	ret
			}else
			{
				SET_BIT(PORTD,channelPosition);
 16c:	42 b3       	in	r20, 0x12	; 18
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_WriteChannel+0xf8>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	9a 95       	dec	r25
 17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_WriteChannel+0xf4>
 17e:	cb 01       	movw	r24, r22
 180:	84 2b       	or	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <Dio_WritePort>:
	 
	
}
void Dio_WritePort(Dio_PortType port, uint8 value)
{
	switch(port)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <Dio_WritePort+0x14>
 18a:	28 f0       	brcs	.+10     	; 0x196 <Dio_WritePort+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f0       	breq	.+14     	; 0x19e <Dio_WritePort+0x18>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f0       	breq	.+14     	; 0x1a2 <Dio_WritePort+0x1c>
 194:	08 95       	ret
	{
		case Dio_Port_A :
			PORTA = value; break;
 196:	6b bb       	out	0x1b, r22	; 27
 198:	08 95       	ret
		
		case Dio_Port_B :
			PORTB = value; break;
 19a:	68 bb       	out	0x18, r22	; 24
 19c:	08 95       	ret
		
		case Dio_Port_C :
			PORTC = value; break;
 19e:	65 bb       	out	0x15, r22	; 21
 1a0:	08 95       	ret
		
		case Dio_Port_D :
			PORTD = value; break;
 1a2:	62 bb       	out	0x12, r22	; 18
 1a4:	08 95       	ret

000001a6 <pulse_EN_LCD>:
	    LCD_WriteString(str);
	}		
}
void pulse_EN_LCD (void)
{
	Dio_WriteChannel(LCD_E,STD_high);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8b e0       	ldi	r24, 0x0B	; 11
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	85 e3       	ldi	r24, 0x35	; 53
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <pulse_EN_LCD+0xa>
 1b4:	00 00       	nop
	_delay_us(10);
	Dio_WriteChannel(LCD_E,STD_low);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	8b e0       	ldi	r24, 0x0B	; 11
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9f e1       	ldi	r25, 0x1F	; 31
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <pulse_EN_LCD+0x1c>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <pulse_EN_LCD+0x22>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);		//clear screen
	LCD_WriteCommand(0x80);	    //cursor home position
}

void LCD_WriteCommand(uint8 command)
{
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	Dio_WritePort(Dio_Port_A,((LCD_PORT & 0x0F) | (command & 0xF0)));        //send high nibble of command
 1d0:	6b b3       	in	r22, 0x1b	; 27
 1d2:	6f 70       	andi	r22, 0x0F	; 15
 1d4:	80 7f       	andi	r24, 0xF0	; 240
 1d6:	68 2b       	or	r22, r24
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 c3 00 	call	0x186	; 0x186 <Dio_WritePort>
	Dio_WriteChannel(LCD_RS,STD_low);									     //RS = 0 (command register)
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	89 e0       	ldi	r24, 0x09	; 9
 1e2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RW,STD_low);									     //RW = 0 (write operation)
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	pulse_EN_LCD();														     //high to low pulse
 1ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pulse_EN_LCD>
	
	Dio_WritePort(Dio_Port_A,((LCD_PORT & 0x0F) | (command << 4)));          //send low nibble of command
 1f2:	6b b3       	in	r22, 0x1b	; 27
 1f4:	6f 70       	andi	r22, 0x0F	; 15
 1f6:	20 e1       	ldi	r18, 0x10	; 16
 1f8:	c2 9f       	mul	r28, r18
 1fa:	c0 01       	movw	r24, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	68 2b       	or	r22, r24
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 c3 00 	call	0x186	; 0x186 <Dio_WritePort>
	Dio_WriteChannel(LCD_RS,STD_low);									     //RS = 0 (command register)
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	89 e0       	ldi	r24, 0x09	; 9
 20a:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RW,STD_low);									     //RW = 0 (write operation)
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	pulse_EN_LCD();														     //high to low pulse
 216:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pulse_EN_LCD>
}
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <LCD_Init>:
#include "dio.h"


void LCD_Init (void)
{
	Dio_WriteChannel(LCD_RW,STD_low);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <LCD_Init+0xe>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_Init+0x18>
 236:	00 00       	nop
	_delay_ms(20);
		LCD_WriteCommand(0x33);		//4-bit mode, 5x7 dots
 238:	83 e3       	ldi	r24, 0x33	; 51
 23a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
	LCD_WriteCommand(0x32);		//4-bit mode, 5x7 dots
 23e:	82 e3       	ldi	r24, 0x32	; 50
 240:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>

	LCD_WriteCommand(0x28);		//4-bit mode, 5x7 dots
 244:	88 e2       	ldi	r24, 0x28	; 40
 246:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
	LCD_WriteCommand(0x0C);		//display on, cursor off
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
	LCD_WriteCommand(0x06);		//increment cursor
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
	LCD_WriteCommand(0x01);		//clear screen
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
	LCD_WriteCommand(0x80);	    //cursor home position
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
 262:	08 95       	ret

00000264 <LCD_Clear>:
	}
}

void LCD_Clear()
{
	LCD_WriteCommand (0x01);		//clear screen
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9f e1       	ldi	r25, 0x1F	; 31
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_Clear+0xa>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_Clear+0x10>
 274:	00 00       	nop
	_delay_ms(2);
	LCD_WriteCommand (0x80);		//cursor home position
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
 27c:	08 95       	ret

0000027e <LCD_WriteChar>:
	Dio_WriteChannel(LCD_RW,STD_low);									     //RW = 0 (write operation)
	pulse_EN_LCD();														     //high to low pulse
}

void LCD_WriteChar(uint8 character)
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
	Dio_WritePort(Dio_Port_A,((LCD_PORT & 0x0F) | (character & 0xF0)));      //send high nibble of command
 282:	6b b3       	in	r22, 0x1b	; 27
 284:	6f 70       	andi	r22, 0x0F	; 15
 286:	80 7f       	andi	r24, 0xF0	; 240
 288:	68 2b       	or	r22, r24
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 c3 00 	call	0x186	; 0x186 <Dio_WritePort>
	Dio_WriteChannel(LCD_RS,STD_high);									     //RS = 1 (data register)
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RW,STD_low);									     //RW = 0 (write operation)
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	8a e0       	ldi	r24, 0x0A	; 10
 29c:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	pulse_EN_LCD();														     //high to low pulse
 2a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pulse_EN_LCD>
	
	Dio_WritePort(Dio_Port_A,((LCD_PORT & 0x0F) | (character << 4)));        //send low nibble of command
 2a4:	6b b3       	in	r22, 0x1b	; 27
 2a6:	6f 70       	andi	r22, 0x0F	; 15
 2a8:	20 e1       	ldi	r18, 0x10	; 16
 2aa:	c2 9f       	mul	r28, r18
 2ac:	c0 01       	movw	r24, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	68 2b       	or	r22, r24
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 c3 00 	call	0x186	; 0x186 <Dio_WritePort>
	Dio_WriteChannel(LCD_RS,STD_high);									     //RS = 1 (data register)
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	89 e0       	ldi	r24, 0x09	; 9
 2bc:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RW,STD_low);									     //RW = 0 (write operation)
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	pulse_EN_LCD();														     //high to low pulse
 2c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pulse_EN_LCD>
}
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <LCD_WriteString>:

void LCD_WriteString (char *str)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
	while(*str)
 2d6:	88 81       	ld	r24, Y
 2d8:	88 23       	and	r24, r24
 2da:	31 f0       	breq	.+12     	; 0x2e8 <LCD_WriteString+0x18>
 2dc:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_WriteChar(*str++);
 2de:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_WriteChar>
	pulse_EN_LCD();														     //high to low pulse
}

void LCD_WriteString (char *str)
{
	while(*str)
 2e2:	89 91       	ld	r24, Y+
 2e4:	81 11       	cpse	r24, r1
 2e6:	fb cf       	rjmp	.-10     	; 0x2de <LCD_WriteString+0xe>
	{
		LCD_WriteChar(*str++);
	}
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <main>:
#include "LEDs_cfg.h"


int main (void)
{
	Port_Init(&Config); //Config
 2ee:	83 e7       	ldi	r24, 0x73	; 115
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 a2 01 	call	0x344	; 0x344 <Port_Init>
	LCD_Init();
 2f6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_WriteCommand(0x80);
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>

	LCD_WriteString("Hello World");
 300:	80 e6       	ldi	r24, 0x60	; 96
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteString>
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	83 ed       	ldi	r24, 0xD3	; 211
 30c:	90 e3       	ldi	r25, 0x30	; 48
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x20>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x2a>
 318:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 31a:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
	LCD_WriteCommand(0xC0);
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WriteCommand>
	LCD_WriteString("Great.");
 324:	8c e6       	ldi	r24, 0x6C	; 108
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteString>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	83 ed       	ldi	r24, 0xD3	; 211
 330:	90 e3       	ldi	r25, 0x30	; 48
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x44>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x4e>
 33c:	00 00       	nop
	_delay_ms(1000);
	

	
	return 0;
}
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <Port_Init>:
/*PD6*/		{Output,STD_low},
/*PD7*/		{Output,STD_low},
};

void Port_Init (const Port_ConfigType *ConfigPtr)
{
 344:	fc 01       	movw	r30, r24
	Dio_ChannelType currentChannel = 0;
	uint8 currentPin = 0;
	Dio_PortType currentPort = 0;
	
	for(currentChannel = Dio_Channel_A0; currentChannel < PINCOUNT; currentChannel++,ConfigPtr++)
 346:	90 e0       	ldi	r25, 0x00	; 0
			{
				case Dio_Port_A :
					CLR_BIT(DDRA,currentPin); break;
				
				case Dio_Port_B :
					CLR_BIT(DDRB,currentPin); break;
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	50 e0       	ldi	r21, 0x00	; 0
	uint8 currentPin = 0;
	Dio_PortType currentPort = 0;
	
	for(currentChannel = Dio_Channel_A0; currentChannel < PINCOUNT; currentChannel++,ConfigPtr++)
	{
		currentPort = currentChannel/8;
 34c:	29 2f       	mov	r18, r25
 34e:	26 95       	lsr	r18
 350:	26 95       	lsr	r18
 352:	26 95       	lsr	r18
		currentPin = currentChannel%8;
 354:	39 2f       	mov	r19, r25
 356:	37 70       	andi	r19, 0x07	; 7
		
		if (ConfigPtr->pinDirection == Output)
 358:	80 81       	ld	r24, Z
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	a1 f5       	brne	.+104    	; 0x3c6 <Port_Init+0x82>
		{	
			switch(currentPort)
 35e:	21 30       	cpi	r18, 0x01	; 1
 360:	89 f0       	breq	.+34     	; 0x384 <Port_Init+0x40>
 362:	28 f0       	brcs	.+10     	; 0x36e <Port_Init+0x2a>
 364:	22 30       	cpi	r18, 0x02	; 2
 366:	c9 f0       	breq	.+50     	; 0x39a <Port_Init+0x56>
 368:	23 30       	cpi	r18, 0x03	; 3
 36a:	11 f1       	breq	.+68     	; 0x3b0 <Port_Init+0x6c>
 36c:	63 c0       	rjmp	.+198    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				case Dio_Port_A : 
					SET_BIT(DDRA,currentPin); break;
 36e:	8a b3       	in	r24, 0x1a	; 26
 370:	ba 01       	movw	r22, r20
 372:	02 c0       	rjmp	.+4      	; 0x378 <Port_Init+0x34>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	3a 95       	dec	r19
 37a:	e2 f7       	brpl	.-8      	; 0x374 <Port_Init+0x30>
 37c:	9b 01       	movw	r18, r22
 37e:	28 2b       	or	r18, r24
 380:	2a bb       	out	0x1a, r18	; 26
 382:	58 c0       	rjmp	.+176    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				
				case Dio_Port_B :
					SET_BIT(DDRB,currentPin); break;
 384:	87 b3       	in	r24, 0x17	; 23
 386:	ba 01       	movw	r22, r20
 388:	02 c0       	rjmp	.+4      	; 0x38e <Port_Init+0x4a>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	3a 95       	dec	r19
 390:	e2 f7       	brpl	.-8      	; 0x38a <Port_Init+0x46>
 392:	9b 01       	movw	r18, r22
 394:	28 2b       	or	r18, r24
 396:	27 bb       	out	0x17, r18	; 23
 398:	4d c0       	rjmp	.+154    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				
				case Dio_Port_C :
					SET_BIT(DDRC,currentPin); break;
 39a:	84 b3       	in	r24, 0x14	; 20
 39c:	ba 01       	movw	r22, r20
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Port_Init+0x60>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	3a 95       	dec	r19
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Port_Init+0x5c>
 3a8:	9b 01       	movw	r18, r22
 3aa:	28 2b       	or	r18, r24
 3ac:	24 bb       	out	0x14, r18	; 20
 3ae:	42 c0       	rjmp	.+132    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				
				case Dio_Port_D :
					SET_BIT(DDRD,currentPin); break;
 3b0:	81 b3       	in	r24, 0x11	; 17
 3b2:	ba 01       	movw	r22, r20
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <Port_Init+0x76>
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	3a 95       	dec	r19
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <Port_Init+0x72>
 3be:	9b 01       	movw	r18, r22
 3c0:	28 2b       	or	r18, r24
 3c2:	21 bb       	out	0x11, r18	; 17
 3c4:	37 c0       	rjmp	.+110    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			}
		}else
		{
			switch(currentPort)
 3c6:	21 30       	cpi	r18, 0x01	; 1
 3c8:	91 f0       	breq	.+36     	; 0x3ee <Port_Init+0xaa>
 3ca:	28 f0       	brcs	.+10     	; 0x3d6 <Port_Init+0x92>
 3cc:	22 30       	cpi	r18, 0x02	; 2
 3ce:	d9 f0       	breq	.+54     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d0:	23 30       	cpi	r18, 0x03	; 3
 3d2:	29 f1       	breq	.+74     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3d4:	2f c0       	rjmp	.+94     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				case Dio_Port_A :
					CLR_BIT(DDRA,currentPin); break;
 3d6:	2a b3       	in	r18, 0x1a	; 26
 3d8:	ba 01       	movw	r22, r20
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <Port_Init+0x9c>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	3a 95       	dec	r19
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <Port_Init+0x98>
 3e4:	86 2f       	mov	r24, r22
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	8a bb       	out	0x1a, r24	; 26
 3ec:	23 c0       	rjmp	.+70     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				
				case Dio_Port_B :
					CLR_BIT(DDRB,currentPin); break;
 3ee:	27 b3       	in	r18, 0x17	; 23
 3f0:	ba 01       	movw	r22, r20
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <Port_Init+0xb4>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	3a 95       	dec	r19
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <Port_Init+0xb0>
 3fc:	86 2f       	mov	r24, r22
 3fe:	80 95       	com	r24
 400:	82 23       	and	r24, r18
 402:	87 bb       	out	0x17, r24	; 23
 404:	17 c0       	rjmp	.+46     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				
				case Dio_Port_C :
					CLR_BIT(DDRC,currentPin); break;
 406:	24 b3       	in	r18, 0x14	; 20
 408:	ba 01       	movw	r22, r20
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	3a 95       	dec	r19
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	86 2f       	mov	r24, r22
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	84 bb       	out	0x14, r24	; 20
 41c:	0b c0       	rjmp	.+22     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				
				case Dio_Port_D :
					CLR_BIT(DDRD,currentPin); break;
 41e:	21 b3       	in	r18, 0x11	; 17
 420:	ba 01       	movw	r22, r20
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	3a 95       	dec	r19
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	86 2f       	mov	r24, r22
 42e:	80 95       	com	r24
 430:	82 23       	and	r24, r18
 432:	81 bb       	out	0x11, r24	; 17
{
	Dio_ChannelType currentChannel = 0;
	uint8 currentPin = 0;
	Dio_PortType currentPort = 0;
	
	for(currentChannel = Dio_Channel_A0; currentChannel < PINCOUNT; currentChannel++,ConfigPtr++)
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	32 96       	adiw	r30, 0x02	; 2
 438:	90 32       	cpi	r25, 0x20	; 32
 43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	87 cf       	rjmp	.-242    	; 0x34c <Port_Init+0x8>
				case Dio_Port_D :
					CLR_BIT(DDRD,currentPin); break;
			}
		}
	}
}
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
